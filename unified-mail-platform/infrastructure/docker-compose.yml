version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unified-mail-postgres
    environment:
      POSTGRES_USER: mailuser
      POSTGRES_PASSWORD: mailpass
      POSTGRES_DB: unified_mail
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mailuser -d unified_mail"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-mail-network

  # Redis (Queue & Cache)
  redis:
    image: redis:7-alpine
    container_name: unified-mail-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-mail-network

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:latest
    container_name: unified-mail-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-mail-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: unified-mail-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-mail-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: unified-mail-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - unified-mail-network

  # Backend API
  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: unified-mail-api
    env_file:
      - ../backend/.env
    environment:
      DATABASE_URL: postgresql://mailuser:mailpass@postgres:5432/unified_mail
      REDIS_URL: redis://redis:6379
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: dev-root-token
      S3_ENDPOINT: http://minio:9000
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      minio:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - unified-mail-network
    restart: unless-stopped

  # Sync Worker
  worker-sync:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: unified-mail-worker-sync
    command: npm run worker:sync
    env_file:
      - ../backend/.env
    environment:
      DATABASE_URL: postgresql://mailuser:mailpass@postgres:5432/unified_mail
      REDIS_URL: redis://redis:6379
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: dev-root-token
      S3_ENDPOINT: http://minio:9000
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - vault
      - minio
      - elasticsearch
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - unified-mail-network
    restart: unless-stopped

  # Index Worker
  worker-index:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: unified-mail-worker-index
    command: npm run worker:index
    env_file:
      - ../backend/.env
    environment:
      DATABASE_URL: postgresql://mailuser:mailpass@postgres:5432/unified_mail
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - unified-mail-network
    restart: unless-stopped

  # Send Worker
  worker-send:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: unified-mail-worker-send
    command: npm run worker:send
    env_file:
      - ../backend/.env
    environment:
      DATABASE_URL: postgresql://mailuser:mailpass@postgres:5432/unified_mail
      REDIS_URL: redis://redis:6379
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: dev-root-token
    depends_on:
      - postgres
      - redis
      - vault
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - unified-mail-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: unified-mail-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "3001:3000"
    depends_on:
      - api
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
    networks:
      - unified-mail-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: unified-mail-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - unified-mail-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: unified-mail-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - unified-mail-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  unified-mail-network:
    driver: bridge
